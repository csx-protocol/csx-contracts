INFO:Detectors:
Reentrancy in StakedCSX.claim(bool,bool,bool,bool) (contracts/CSX/StakedCSX.sol#149-164):
	External calls:
	- _claim(msg.sender,address(tokenWETH),convertWethToEth) (contracts/CSX/StakedCSX.sol#156)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- tokenWETH.withdraw(reward) (contracts/CSX/StakedCSX.sol#248)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
		- IERC20(_token).safeTransfer(_to,reward) (contracts/CSX/StakedCSX.sol#255)
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- tokenWETH.withdraw(reward) (contracts/CSX/StakedCSX.sol#248)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
		- IERC20(_token).safeTransfer(_to,reward) (contracts/CSX/StakedCSX.sol#255)
	External calls sending eth:
	- _claim(msg.sender,address(tokenWETH),convertWethToEth) (contracts/CSX/StakedCSX.sol#156)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
	State variables written after the call(s):
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- credit[_token][_to] = 0 (contracts/CSX/StakedCSX.sol#241)
	StakedCSX.credit (contracts/CSX/StakedCSX.sol#37) can be used in cross function reentrancies:
	- StakedCSX._claimToCredit(address) (contracts/CSX/StakedCSX.sol#209-227)
	- StakedCSX.rewardOf(address) (contracts/CSX/StakedCSX.sol#166-186)
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- rewardRate[_token][_to] = lastRewardRate[_token] (contracts/CSX/StakedCSX.sol#262)
	StakedCSX.rewardRate (contracts/CSX/StakedCSX.sol#33) can be used in cross function reentrancies:
	- StakedCSX._updateRewardRate(address,address) (contracts/CSX/StakedCSX.sol#261-263)
	- StakedCSX.rewardOf(address) (contracts/CSX/StakedCSX.sol#166-186)
	- StakedCSX.rewardRate (contracts/CSX/StakedCSX.sol#33)
Reentrancy in StakedCSX.claim(bool,bool,bool,bool) (contracts/CSX/StakedCSX.sol#149-164):
	External calls:
	- _claim(msg.sender,address(tokenWETH),convertWethToEth) (contracts/CSX/StakedCSX.sol#156)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- tokenWETH.withdraw(reward) (contracts/CSX/StakedCSX.sol#248)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
		- IERC20(_token).safeTransfer(_to,reward) (contracts/CSX/StakedCSX.sol#255)
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- tokenWETH.withdraw(reward) (contracts/CSX/StakedCSX.sol#248)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
		- IERC20(_token).safeTransfer(_to,reward) (contracts/CSX/StakedCSX.sol#255)
	- _claim(msg.sender,address(tokenUSDT),false) (contracts/CSX/StakedCSX.sol#162)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- tokenWETH.withdraw(reward) (contracts/CSX/StakedCSX.sol#248)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
		- IERC20(_token).safeTransfer(_to,reward) (contracts/CSX/StakedCSX.sol#255)
	External calls sending eth:
	- _claim(msg.sender,address(tokenWETH),convertWethToEth) (contracts/CSX/StakedCSX.sol#156)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
	- _claim(msg.sender,address(tokenUSDC),false) (contracts/CSX/StakedCSX.sol#159)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
	- _claim(msg.sender,address(tokenUSDT),false) (contracts/CSX/StakedCSX.sol#162)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
		- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
	State variables written after the call(s):
	- _claim(msg.sender,address(tokenUSDT),false) (contracts/CSX/StakedCSX.sol#162)
		- credit[_token][_to] = 0 (contracts/CSX/StakedCSX.sol#241)
	StakedCSX.credit (contracts/CSX/StakedCSX.sol#37) can be used in cross function reentrancies:
	- StakedCSX._claimToCredit(address) (contracts/CSX/StakedCSX.sol#209-227)
	- StakedCSX.rewardOf(address) (contracts/CSX/StakedCSX.sol#166-186)
	- _claim(msg.sender,address(tokenUSDT),false) (contracts/CSX/StakedCSX.sol#162)
		- rewardRate[_token][_to] = lastRewardRate[_token] (contracts/CSX/StakedCSX.sol#262)
	StakedCSX.rewardRate (contracts/CSX/StakedCSX.sol#33) can be used in cross function reentrancies:
	- StakedCSX._updateRewardRate(address,address) (contracts/CSX/StakedCSX.sol#261-263)
	- StakedCSX.rewardOf(address) (contracts/CSX/StakedCSX.sol#166-186)
	- StakedCSX.rewardRate (contracts/CSX/StakedCSX.sol#33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse = (3 * denominator) ^ 2 (contracts/utils/math/Math.sol#113)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#117)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#118)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#119)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#120)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/utils/math/Math.sol#98)
	- inverse *= 2 - denominator * inverse (contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (contracts/utils/math/Math.sol#101)
	- result = prod0 * inverse (contracts/utils/math/Math.sol#128)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Users.getUserTradeCountByStatus(address,TradeStatus).count (contracts/Users/Users.sol#214) is a local variable never initialized
CSXTradeFactory.getTradeCountByStatus(TradeStatus).count (contracts/TradeFactory/CSXTradeFactory.sol#279) is a local variable never initialized
Users.getUserTradeUIsByStatus(address,TradeStatus,uint256,uint256).resultIndex (contracts/Users/Users.sol#230) is a local variable never initialized
CSXTradeFactory.getTradeDetailsByIndex(uint256)._skinInfo (contracts/TradeFactory/CSXTradeFactory.sol#210) is a local variable never initialized
StakedCSX._claim(address,address,bool).reward (contracts/CSX/StakedCSX.sol#230) is a local variable never initialized
CSXTradeFactory.getTradeIndexesByStatus(TradeStatus,uint256,uint256).resultIndex (contracts/TradeFactory/CSXTradeFactory.sol#254) is a local variable never initialized
CSXTradeFactory.createListingContract(ListingParams)._extraTest (contracts/TradeFactory/CSXTradeFactory.sol#157) is a local variable never initialized
CSXTradeFactory.getTradeDetailsByIndex(uint256)._sTradeUrl (contracts/TradeFactory/CSXTradeFactory.sol#197) is a local variable never initialized
CSXTradeFactory.getTradeDetailsByIndex(uint256)._bTradeUrl (contracts/TradeFactory/CSXTradeFactory.sol#201) is a local variable never initialized
CSXTrade.getNetValue(bytes32).buyerRatio (contracts/Trade/CSXTrade.sol#572) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
VestedStaking.deposit(uint256) (contracts/CSX/VestedStaking.sol#69-77) ignores return value by csxToken.approve(address(sCsxToken),amount) (contracts/CSX/VestedStaking.sol#75)
CSXTrade.sellerCancel() (contracts/Trade/CSXTrade.sol#167-185) ignores return value by usersContract.removeAssetIdUsed(itemSellerAssetId,seller) (contracts/Trade/CSXTrade.sol#184)
CSXTrade._distributeProceeds() (contracts/Trade/CSXTrade.sol#491-547) ignores return value by paymentToken.approve(address(sCSXToken),tokenHoldersNetReward) (contracts/Trade/CSXTrade.sol#536)
CSXTrade.getNetValue(bytes32) (contracts/Trade/CSXTrade.sol#555-594) ignores return value by (_buyerRatio) = referralRegistryContract.getReferralCodeRatios(_affLink) (contracts/Trade/CSXTrade.sol#575-578)
CSXTradeFactory.createListingContract(ListingParams) (contracts/TradeFactory/CSXTradeFactory.sol#77-183) ignores return value by usersContract.setAssetIdUsed(params.assetId,msg.sender,newAddress) (contracts/TradeFactory/CSXTradeFactory.sol#122)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: (_stickers[y].name,_stickers[y].material,_stickers[y].slot,_stickers[y].imageLink) = _contract.stickers(y) (contracts/TradeFactory/CSXTradeFactory.sol#223-228)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: _contract = tradeFactoryBaseStorage.getTradeContractByIndex(i) (contracts/TradeFactory/CSXTradeFactory.sol#189)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.seller = _contract.seller() (contracts/TradeFactory/CSXTradeFactory.sol#192)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.buyer = _contract.buyer() (contracts/TradeFactory/CSXTradeFactory.sol#193)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.itemMarketName = _contract.itemMarketName() (contracts/TradeFactory/CSXTradeFactory.sol#194)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.inspectLink = _contract.inspectLink() (contracts/TradeFactory/CSXTradeFactory.sol#195)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: (_sTradeUrl.partner,_sTradeUrl.token) = _contract.sellerTradeUrl() (contracts/TradeFactory/CSXTradeFactory.sol#198)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: (_bTradeUrl.partner,_bTradeUrl.token) = _contract.buyerTradeUrl() (contracts/TradeFactory/CSXTradeFactory.sol#202)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.weiPrice = _contract.weiPrice() (contracts/TradeFactory/CSXTradeFactory.sol#205)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.itemImageUrl = _contract.itemImageUrl() (contracts/TradeFactory/CSXTradeFactory.sol#206)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.averageSellerDeliveryTime = usersContract.getAverageDeliveryTime(result.seller) (contracts/TradeFactory/CSXTradeFactory.sol#207-209)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: (_skinInfo.floatValues,_skinInfo.paintSeed,_skinInfo.paintIndex) = _contract.skinInfo() (contracts/TradeFactory/CSXTradeFactory.sol#211-215)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.status = _contract.status() (contracts/TradeFactory/CSXTradeFactory.sol#217)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: lengthOfStickersArray = _contract.stickerLength() (contracts/TradeFactory/CSXTradeFactory.sol#219)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.weaponType = _contract.weaponType() (contracts/TradeFactory/CSXTradeFactory.sol#232)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.priceType = _contract.priceType() (contracts/TradeFactory/CSXTradeFactory.sol#234)
CSXTradeFactory.getTradeDetailsByIndex(uint256) (contracts/TradeFactory/CSXTradeFactory.sol#185-239) has external calls inside a loop: result.assetId = _contract.itemSellerAssetId() (contracts/TradeFactory/CSXTradeFactory.sol#236)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in CSXTradeFactory.createListingContract(ListingParams) (contracts/TradeFactory/CSXTradeFactory.sol#77-183):
	External calls:
	- nS = tradeFactoryBaseStorage.newTradeContract(params.itemMarketName,params.tradeUrl,params.assetId,params.inspectLink,params.itemImageUrl,params.weiPrice,params.skinInfo) (contracts/TradeFactory/CSXTradeFactory.sol#98-106)
	State variables written after the call(s):
	- contractAddressToIndex[newAddress] = _tContracts - 1 (contracts/TradeFactory/CSXTradeFactory.sol#118)
	- isTradeContract[newAddress] = true (contracts/TradeFactory/CSXTradeFactory.sol#116)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
VestedStaking.withdraw(uint256) (contracts/CSX/VestedStaking.sol#135-146) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < vesting.startTime + VESTING_PERIOD (contracts/CSX/VestedStaking.sol#139)
CSXTrade.buyerCancel() (contracts/Trade/CSXTrade.sol#262-282) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < buyerCommitTimestamp + 86400 (contracts/Trade/CSXTrade.sol#266)
CSXTrade.sellerConfirmsTrade() (contracts/Trade/CSXTrade.sol#354-373) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < sellerAcceptedTimestamp + 691200 (contracts/Trade/CSXTrade.sol#355)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)
Strings.toString(uint256) (contracts/utils/Strings.sol#19-39) uses assembly
	- INLINE ASM (contracts/utils/Strings.sol#25-27)
	- INLINE ASM (contracts/utils/Strings.sol#31-33)
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) uses assembly
	- INLINE ASM (contracts/utils/math/Math.sol#62-66)
	- INLINE ASM (contracts/utils/math/Math.sol#82-89)
	- INLINE ASM (contracts/utils/math/Math.sol#96-105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.8.19', '^0.8.0', '^0.8.1', '^0.8.19']
	- 0.8.19 (contracts/CSX/CSXToken.sol#3)
	- 0.8.19 (contracts/CSX/EscrowedCSX.sol#4)
	- 0.8.19 (contracts/CSX/Interfaces.sol#2)
	- 0.8.19 (contracts/CSX/VestedCSX.sol#4)
	- 0.8.19 (contracts/CSX/mock/USDCToken.sol#4)
	- 0.8.19 (contracts/CSX/mock/USDTToken.sol#4)
	- 0.8.19 (contracts/CSX/mock/WETH9Mock.sol#15)
	- 0.8.19 (contracts/Keepers/IKeepers.sol#2)
	- 0.8.19 (contracts/Keepers/Keepers.sol#2)
	- 0.8.19 (contracts/Trade/BuyAssistoor.sol#2)
	- 0.8.19 (contracts/Trade/CSXTrade.sol#2)
	- 0.8.19 (contracts/TradeFactory/CSXTradeFactory.sol#2)
	- 0.8.19 (contracts/TradeFactory/ITradeFactory.sol#2)
	- 0.8.19 (contracts/TradeFactory/TradeFactoryBase.sol#2)
	- 0.8.19 (contracts/TradeFactory/storage/ITradeFactoryBaseStorage.sol#2)
	- 0.8.19 (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#2)
	- 0.8.19 (contracts/Users/IUsers.sol#2)
	- 0.8.19 (contracts/Users/Users.sol#2)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (contracts/Referrals/NetValueCalculator.sol#2)
	- ^0.8.0 (contracts/Users/UserProfileLevel.sol#4)
	- ^0.8.0 (contracts/utils/Strings.sol#4)
	- ^0.8.0 (contracts/utils/math/Math.sol#4)
	- ^0.8.0 (contracts/utils/math/SignedMath.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.19 (contracts/CSX/StakedCSX.sol#2)
	- ^0.8.19 (contracts/CSX/VestedStaking.sol#4)
	- ^0.8.19 (contracts/Referrals/IReferralRegistry.sol#2)
	- ^0.8.19 (contracts/Referrals/ReferralRegistry.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Math.average(uint256,uint256) (contracts/utils/math/Math.sol#34-37) is never used and should be removed
Math.ceilDiv(uint256,uint256) (contracts/utils/math/Math.sol#45-48) is never used and should be removed
Math.log10(uint256,Math.Rounding) (contracts/utils/math/Math.sol#287-292) is never used and should be removed
Math.log2(uint256) (contracts/utils/math/Math.sol#196-232) is never used and should be removed
Math.log2(uint256,Math.Rounding) (contracts/utils/math/Math.sol#238-243) is never used and should be removed
Math.log256(uint256) (contracts/utils/math/Math.sol#300-324) is never used and should be removed
Math.log256(uint256,Math.Rounding) (contracts/utils/math/Math.sol#330-335) is never used and should be removed
Math.max(uint256,uint256) (contracts/utils/math/Math.sol#19-21) is never used and should be removed
Math.min(uint256,uint256) (contracts/utils/math/Math.sol#26-28) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256) (contracts/utils/math/Math.sol#55-131) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256,Math.Rounding) (contracts/utils/math/Math.sol#136-142) is never used and should be removed
Math.sqrt(uint256) (contracts/utils/math/Math.sol#149-180) is never used and should be removed
Math.sqrt(uint256,Math.Rounding) (contracts/utils/math/Math.sol#185-190) is never used and should be removed
SignedMath.abs(int256) (contracts/utils/math/SignedMath.sol#37-42) is never used and should be removed
SignedMath.average(int256,int256) (contracts/utils/math/SignedMath.sol#28-32) is never used and should be removed
SignedMath.max(int256,int256) (contracts/utils/math/SignedMath.sol#13-15) is never used and should be removed
SignedMath.min(int256,int256) (contracts/utils/math/SignedMath.sol#20-22) is never used and should be removed
Strings.equal(string,string) (contracts/utils/Strings.sol#82-84) is never used and should be removed
Strings.toHexString(uint256) (contracts/utils/Strings.sol#51-55) is never used and should be removed
Strings.toString(int256) (contracts/utils/Strings.sol#44-46) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version0.8.19 (contracts/CSX/CSXToken.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/EscrowedCSX.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/Interfaces.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (contracts/CSX/StakedCSX.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/VestedCSX.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (contracts/CSX/VestedStaking.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/mock/USDCToken.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/mock/USDTToken.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/CSX/mock/WETH9Mock.sol#15) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/Keepers/IKeepers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/Keepers/Keepers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (contracts/Referrals/IReferralRegistry.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.0 (contracts/Referrals/NetValueCalculator.sol#2) allows old versions
Pragma version^0.8.19 (contracts/Referrals/ReferralRegistry.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/Trade/BuyAssistoor.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/Trade/CSXTrade.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/TradeFactory/CSXTradeFactory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/TradeFactory/ITradeFactory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/TradeFactory/TradeFactoryBase.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/TradeFactory/storage/ITradeFactoryBaseStorage.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (contracts/Users/IUsers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.0 (contracts/Users/UserProfileLevel.sol#4) allows old versions
Pragma version0.8.19 (contracts/Users/Users.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.0 (contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (contracts/utils/math/Math.sol#4) allows old versions
Pragma version^0.8.0 (contracts/utils/math/SignedMath.sol#4) allows old versions
solc-0.8.19 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in SafeERC20._callOptionalReturnBool(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#134-142):
	- (success,returndata) = address(token).call(data) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#139)
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#64-69):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#67)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
Low level call in StakedCSX._claim(address,address,bool) (contracts/CSX/StakedCSX.sol#229-259):
	- (success) = address(msg.sender).call{value: reward}() (contracts/CSX/StakedCSX.sol#250)
Low level call in VestedStaking.claimRewards(bool,bool,bool,bool) (contracts/CSX/VestedStaking.sol#96-122):
	- (success) = msg.sender.call{value: wethAmount}() (contracts/CSX/VestedStaking.sol#117)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
StakedCSX (contracts/CSX/StakedCSX.sol#10-264) should inherit from IStakedCSX (contracts/CSX/Interfaces.sol#17-37)
Keepers (contracts/Keepers/Keepers.sol#8-108) should inherit from IKeepers (contracts/Keepers/IKeepers.sol#4-9)
Users (contracts/Users/Users.sol#20-335) should inherit from IUsers (contracts/Users/IUsers.sol#34-61)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance
INFO:Detectors:
Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#59) is not in mixedCase
Parameter EscrowedCSX.init(address)._vCSXToken (contracts/CSX/EscrowedCSX.sol#30) is not in mixedCase
Parameter EscrowedCSX.mintEscrow(uint256)._amount (contracts/CSX/EscrowedCSX.sol#38) is not in mixedCase
Parameter StakedCSX.stake(uint256)._amount (contracts/CSX/StakedCSX.sol#69) is not in mixedCase
Parameter StakedCSX.unStake(uint256)._amount (contracts/CSX/StakedCSX.sol#81) is not in mixedCase
Parameter StakedCSX.depositDividend(address,uint256)._token (contracts/CSX/StakedCSX.sol#98) is not in mixedCase
Parameter StakedCSX.depositDividend(address,uint256)._reward (contracts/CSX/StakedCSX.sol#98) is not in mixedCase
Parameter StakedCSX.rewardOf(address)._account (contracts/CSX/StakedCSX.sol#166) is not in mixedCase
Variable VestedCSX.EscrowedCSX (contracts/CSX/VestedCSX.sol#17) is not in mixedCase
Variable VestedCSX.StakedCSX (contracts/CSX/VestedCSX.sol#18) is not in mixedCase
Variable VestedCSX.WETH (contracts/CSX/VestedCSX.sol#19) is not in mixedCase
Variable VestedCSX.USDC (contracts/CSX/VestedCSX.sol#20) is not in mixedCase
Variable VestedCSX.CSX (contracts/CSX/VestedCSX.sol#21) is not in mixedCase
Variable VestedCSX.USDT (contracts/CSX/VestedCSX.sol#22) is not in mixedCase
Parameter Keepers.indexOf(address)._keeper (contracts/Keepers/Keepers.sol#46) is not in mixedCase
Parameter Keepers.addKeeper(address)._keeper (contracts/Keepers/Keepers.sol#50) is not in mixedCase
Parameter Keepers.removeKeeper(address)._keeper (contracts/Keepers/Keepers.sol#59) is not in mixedCase
Parameter Keepers.isKeeperNode(address)._address (contracts/Keepers/Keepers.sol#69) is not in mixedCase
Parameter Keepers.isKeeper(address)._address (contracts/Keepers/Keepers.sol#77) is not in mixedCase
Parameter Keepers.changeKeeperNode(address)._newAddres (contracts/Keepers/Keepers.sol#85) is not in mixedCase
Parameter Keepers.changeCouncil(address)._newCouncil (contracts/Keepers/Keepers.sol#93) is not in mixedCase
Parameter Keepers.isCouncil(address)._address (contracts/Keepers/Keepers.sol#101) is not in mixedCase
Parameter ReferralRegistry.initFactory(address)._factory (contracts/Referrals/ReferralRegistry.sol#27) is not in mixedCase
Parameter ReferralRegistry.emitReferralCodeRebateUpdated(address,address,bytes32,uint256)._paymentToken (contracts/Referrals/ReferralRegistry.sol#106) is not in mixedCase
Function BuyAssistoor.BuyWithEthToWeth(TradeUrl,bytes32,address) (contracts/Trade/BuyAssistoor.sol#27-54) is not in mixedCase
Parameter BuyAssistoor.BuyWithEthToWeth(TradeUrl,bytes32,address)._buyerTradeUrl (contracts/Trade/BuyAssistoor.sol#27) is not in mixedCase
Parameter BuyAssistoor.BuyWithEthToWeth(TradeUrl,bytes32,address)._affLink (contracts/Trade/BuyAssistoor.sol#27) is not in mixedCase
Parameter BuyAssistoor.BuyWithEthToWeth(TradeUrl,bytes32,address)._tradeContract (contracts/Trade/BuyAssistoor.sol#27) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._stickers (contracts/Trade/CSXTrade.sol#139) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._weaponType (contracts/Trade/CSXTrade.sol#140) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._paymentToken (contracts/Trade/CSXTrade.sol#141) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._priceType (contracts/Trade/CSXTrade.sol#142) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._referralRegistryContract (contracts/Trade/CSXTrade.sol#143) is not in mixedCase
Parameter CSXTrade.initExtraInfo(Sticker[],string,address,PriceType,address,address)._sCSXToken (contracts/Trade/CSXTrade.sol#144) is not in mixedCase
Parameter CSXTrade.commitBuy(TradeUrl,bytes32,address)._buyerTradeUrl (contracts/Trade/CSXTrade.sol#189) is not in mixedCase
Parameter CSXTrade.commitBuy(TradeUrl,bytes32,address)._affLink (contracts/Trade/CSXTrade.sol#190) is not in mixedCase
Parameter CSXTrade.commitBuy(TradeUrl,bytes32,address)._buyerAddress (contracts/Trade/CSXTrade.sol#191) is not in mixedCase
Parameter CSXTrade.openDispute(string)._complaint (contracts/Trade/CSXTrade.sol#429) is not in mixedCase
Parameter CSXTrade.getNetValue(bytes32)._affLink (contracts/Trade/CSXTrade.sol#556) is not in mixedCase
Parameter TradeFactoryBase.changeBaseFee(uint256)._baseFee (contracts/TradeFactory/TradeFactoryBase.sol#48) is not in mixedCase
Parameter TradeFactoryBaseStorage.init(address)._factoryAddress (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#23) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._itemMarketName (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#38) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._tradeUrl (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#39) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._assetId (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#40) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._inspectLink (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#41) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._itemImageUrl (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#42) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._weiPrice (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#43) is not in mixedCase
Parameter TradeFactoryBaseStorage.newTradeContract(string,TradeUrl,string,string,string,uint256,SkinInfo)._skinInfo (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#44) is not in mixedCase
Parameter UserProfileLevel.levelUp(uint256,uint256)._tokenAmount (contracts/Users/UserProfileLevel.sol#47) is not in mixedCase
Parameter UserProfileLevel.levelUp(uint256,uint256)._levels (contracts/Users/UserProfileLevel.sol#47) is not in mixedCase
Parameter Users.setFactoryAddress(address)._factoryAddress (contracts/Users/Users.sol#69) is not in mixedCase
Parameter Users.warnUser(address)._user (contracts/Users/Users.sol#104) is not in mixedCase
Parameter Users.banUser(address)._user (contracts/Users/Users.sol#113) is not in mixedCase
Parameter Users.unbanUser(address)._user (contracts/Users/Users.sol#118) is not in mixedCase
Parameter Users.isBanned(address)._user (contracts/Users/Users.sol#127) is not in mixedCase
Parameter Users.removeAssetIdUsed(string,address)._assetId (contracts/Users/Users.sol#304) is not in mixedCase
Parameter Users.hasAlreadyListedItem(string,address)._assetId (contracts/Users/Users.sol#312) is not in mixedCase
Parameter Users.setAssetIdUsed(string,address,address)._assetId (contracts/Users/Users.sol#326) is not in mixedCase
Variable Users.UserToContractDeliveryStartTime (contracts/Users/Users.sol#60) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Reentrancy in WETH9Mock.withdraw(uint256) (contracts/CSX/mock/WETH9Mock.sol#37-42):
	External calls:
	- address(msg.sender).transfer(wad) (contracts/CSX/mock/WETH9Mock.sol#40)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,wad) (contracts/CSX/mock/WETH9Mock.sol#41)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
Variable VestedCSX.constructor(address,address,address,address,address,address)._eCsxAddress (contracts/CSX/VestedCSX.sol#34) is too similar to VestedCSX.constructor(address,address,address,address,address,address)._sCsxAddress (contracts/CSX/VestedCSX.sol#35)
Variable VestedCSX.constructor(address,address,address,address,address,address)._usdcAddress (contracts/CSX/VestedCSX.sol#37) is too similar to VestedCSX.constructor(address,address,address,address,address,address)._usdtAddress (contracts/CSX/VestedCSX.sol#39)
Variable VestedStaking.constructor(address,address,address,address,address,address,address)._sCsxTokenAddress (contracts/CSX/VestedStaking.sol#41) is too similar to VestedStaking.constructor(address,address,address,address,address,address,address)._vCsxTokenAddress (contracts/CSX/VestedStaking.sol#42)
Variable VestedStaking.constructor(address,address,address,address,address,address,address)._usdcTokenAddress (contracts/CSX/VestedStaking.sol#44) is too similar to VestedStaking.constructor(address,address,address,address,address,address,address)._usdtTokenAddress (contracts/CSX/VestedStaking.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
CSXToken.slitherConstructorConstantVariables() (contracts/CSX/CSXToken.sol#7-14) uses literals with too many digits:
	- maxSupply = 100000000 * 10 ** 18 (contracts/CSX/CSXToken.sol#9)
VestedCSX.slitherConstructorConstantVariables() (contracts/CSX/VestedCSX.sol#15-100) uses literals with too many digits:
	- MAX_SUPPLY = 100000000000000000000000000 (contracts/CSX/VestedCSX.sol#24)
USDCToken.slitherConstructorConstantVariables() (contracts/CSX/mock/USDCToken.sol#8-20) uses literals with too many digits:
	- maxSupply = 100000000 * 10 ** 6 (contracts/CSX/mock/USDCToken.sol#10)
USDTToken.slitherConstructorConstantVariables() (contracts/CSX/mock/USDTToken.sol#8-19) uses literals with too many digits:
	- maxSupply = 100000000 * 10 ** 6 (contracts/CSX/mock/USDTToken.sol#10)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
WETH9Mock.decimals (contracts/CSX/mock/WETH9Mock.sol#20) should be constant 
WETH9Mock.name (contracts/CSX/mock/WETH9Mock.sol#18) should be constant 
WETH9Mock.symbol (contracts/CSX/mock/WETH9Mock.sol#19) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
BuyAssistoor.weth (contracts/Trade/BuyAssistoor.sol#21) should be immutable 
CSXTrade.factoryContract (contracts/Trade/CSXTrade.sol#67) should be immutable 
CSXTrade.keepersContract (contracts/Trade/CSXTrade.sol#65) should be immutable 
CSXTrade.seller (contracts/Trade/CSXTrade.sol#38) should be immutable 
CSXTrade.usersContract (contracts/Trade/CSXTrade.sol#66) should be immutable 
CSXTrade.weiPrice (contracts/Trade/CSXTrade.sol#54) should be immutable 
CSXTradeFactory.buyAssistoor (contracts/TradeFactory/CSXTradeFactory.sol#50) should be immutable 
CSXTradeFactory.referralRegistryAddress (contracts/TradeFactory/CSXTradeFactory.sol#48) should be immutable 
CSXTradeFactory.sCSXTokenAddress (contracts/TradeFactory/CSXTradeFactory.sol#49) should be immutable 
EscrowedCSX.csxToken (contracts/CSX/EscrowedCSX.sol#20) should be immutable 
EscrowedCSX.deployer (contracts/CSX/EscrowedCSX.sol#18) should be immutable 
ReferralRegistry.deployer (contracts/Referrals/ReferralRegistry.sol#21) should be immutable 
TradeFactoryBase.keepersContract (contracts/TradeFactory/TradeFactoryBase.sol#22) should be immutable 
TradeFactoryBase.tradeFactoryBaseStorage (contracts/TradeFactory/TradeFactoryBase.sol#24) should be immutable 
TradeFactoryBase.usersContract (contracts/TradeFactory/TradeFactoryBase.sol#23) should be immutable 
TradeFactoryBaseStorage.keepersContract (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#13) should be immutable 
TradeFactoryBaseStorage.usersContract (contracts/TradeFactory/storage/TradeFactoryBaseStorage.sol#14) should be immutable 
UserProfileLevel.csxToken (contracts/Users/UserProfileLevel.sol#24) should be immutable 
Users.keepers (contracts/Users/Users.sol#62) should be immutable 
VestedCSX.CSX (contracts/CSX/VestedCSX.sol#21) should be immutable 
VestedCSX.EscrowedCSX (contracts/CSX/VestedCSX.sol#17) should be immutable 
VestedCSX.StakedCSX (contracts/CSX/VestedCSX.sol#18) should be immutable 
VestedCSX.USDC (contracts/CSX/VestedCSX.sol#20) should be immutable 
VestedCSX.USDT (contracts/CSX/VestedCSX.sol#22) should be immutable 
VestedCSX.WETH (contracts/CSX/VestedCSX.sol#19) should be immutable 
VestedStaking.csxToken (contracts/CSX/VestedStaking.sol#34) should be immutable 
VestedStaking.sCsxToken (contracts/CSX/VestedStaking.sol#32) should be immutable 
VestedStaking.usdcToken (contracts/CSX/VestedStaking.sol#35) should be immutable 
VestedStaking.usdtToken (contracts/CSX/VestedStaking.sol#36) should be immutable 
VestedStaking.vCsxToken (contracts/CSX/VestedStaking.sol#33) should be immutable 
VestedStaking.vesterAddress (contracts/CSX/VestedStaking.sol#31) should be immutable 
VestedStaking.wethToken (contracts/CSX/VestedStaking.sol#37) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:. analyzed (39 contracts with 88 detectors), 221 result(s) found